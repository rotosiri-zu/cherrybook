# 4.2 配列
# 空の配列を作る
[]

# 3つの要素が格納された配列を作る
[要素1,要素2,要素3]

# 空の配列を作成し、そのクラス名を確認する
[].class #=>Array

a=[1,2,3]

a=[
  1,
  2,
  3
]

a=['apple','orange','melon']

a=[1,'apple',2,'orange',3,'melon']

a=[[10,20,30],[40,50,60],[70,80,90]]

a=[1,2,3]
# 1つめの要素を習得
a[0]#=>1
# 2つめの要素を取得
a[1]#=>2
# 3つめの要素
a[2]#=>3

a=[1,2,3]
a[100]#=>nil

a=[1,2,3]
a.size #=>3
a.length #=>3

# 4.2.1 要素の変更、追加、削除
a=[1,2,3]
a[1]=20
a #=>[1,20,3]

a=[1,2,3]
a[4]=50
a #=>[1,2,3,nil,50]

a=[]
a<<1
a<<2
a<<3
a #=>[1,2,3]

a=[1,2,3]
# 2番目の要素を削除する(削除した値が戻り値になる)
a.delete_at(1) #=>2
a #=>[1,3]

# 存在しない添え字を指定するとnil返る
a.delete_at(100)#=>nil
a #=>[1,3]

# 4.2.2 配列を使った多重代入
a,b = 1,2
a #=>1
b #=>2

# 配列を使って多重代入する
a,b = [1,2]
a #=>1
b #=>2

# 右辺の数が少ない場合はnilが入る
c,d = [10]
c #=>10
d #=>nil

# 右辺の数が多い場合ははみ出した値が切り捨てられる
e,f = [100,200,300]
c #=>100
f #=>200

# divmodは商と余りを配列で返す
14.divmod(3) #=>[4,2]

# 戻り値を配列のまま受け取る
quo_rem = 14.divmod(3)
"商 =#{quo_rem[0]}, 余り=#{quo_rem[1]}" #=>"商=4,余り=2"

# 多重代入で別々の変数として受け取る
quotient,remainder = 14.divmod(3) "商 =#{quotient}, 余り=#{remainder}" #=>"商=4, 余り=2"