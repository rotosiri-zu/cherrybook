# 4.7 配列についてもっと詳しく
# 4.7.1 さまざまな要素の取得方法
a = [1,2,3,4,5]
a[1..3] #=>[2,3,4]

a = [1,2,3,4,5]
a.values_at(0,2,4) #=>[1,3,5]

a = [1,2,3]
# 最後の要素を取得する
a[a.size - 1] #=>3

a = [1,2,3]

# 最後の要素を取得する
a[-1] #=>3

# 最後から2番目の要素を取得する
a[-2] #=>2

# 最後から2番目の要素から2つの要素を取得する
a[-2,2] #=>[2,3]

a = [1,2,3]
a.last #=>3
a.last(2) #=>[2,3]

a = [1,2,3]
a.first #=>1
a.first(2) #=>[1,2]

# 4.7.2 さまざまな要素の変更方法
a = [1,2,3]
a[-3] = -10 #=>[-10,2,3]

# 指定可能な負の値よりも小さくなるとエラーが発生する
a[-4] = 0 #=>IndexError: index -4 too small for array;minimum:-3

a = [1,2,3,4,5]
# 2つめから3要素分を100で置き換える
a[1,3] = 100
a #=>[1,100,5]

a = []
a.push(1) #=>[1]
a.push(2,3) #=>[1,2,3]

a = [1,2,3,1,2,3]
# 値が2である要素を削除する(削除した値が戻り値になる)
a.delete(2) #=>2
a #=>[1,3,1,3]

# 存在しない値を指定するとnilが返る
a.deletre(5) #=>nil
a #=>[1,3,1,3]

# 4.7.3 配列の連結
a = [1]
b = [2,3]
a.concat(b) #=>[1,2,3]

# aは変更される(破壊的)
a #=>[1,2,3]

# bは変更されない
b #=>[2,3]

a = [1]
b = [2,3]
a + b #=>[1,2,3]

# aもbも変更されない(非破壊的)
a #=>[1]
b #=>[2,3]

# 4.7.4 配列の和集合、差集合、積集合
a = [1,2,3]
b = [3,4,5]
a | b #=>[1,2,3,4,5]

a = [1,2,3]
b = [3,4,5]
a - b #=>[1,2]

a = [1,2,3]
b = [3,4,5]
a & b #=>[3]

require 'set'

a = Set.new([1,2,3])
b = Set.new([3,4,5])
a | b #=>#<Set:{1,2,3,4,5}>
a - b #=>#<Set:{1,2}>
a & b #=>#<Set:{3}>

# 4.7.5 多重代入で残りの全要素を配列として受け取る
e,f = 100, 200, 300
e #=>100
f #=>200

e,*f = 100, 200, 300
e #=>100
f #=>[200, 300]

# 4.7.6 1つの配列を複数の引数として展開する
a = []
a.push(1) #=>[1]
# 2と3を一度に追加
a.push(2,3) #=>[1,2,3]

a = []
b = [2,3]
a.push(1) #=>[1]
# 配列をそのまま追加する(a,push([2,3])と同じ)
a.push(b) #=>[1,[2,3]]

a = []
b = [2,3]
a.push(1) #=>[1]
# 配列を * 付き追加する(a,push([2,3])と同じ)
a.push(*b) #=>[1,2,3]

a.push(*b)

a.push(*[2,3])

a.push(2,3)

# 4.7.7 メソッドの可変長引数
# def メソッド名(引数1, 引数2, * 可変長引数)
  # メソッドの処理
# end

def greeeting(*names)
  "#{names.join(' と ')}、 こんにちは! "
end
greeting(' 田 中 さ ん ')
#=>"田中さん、こんにちは! "
greeting(' 田中さん','鈴木さん ')
#=>"田中さんと鈴木さん、こんにちは! "
greeting(' 田中さん','鈴木さん','佐藤さん')
#=>"田中さんと鈴木さんと佐藤さん、こんにちは! "